#!/usr/bin/env python

"""
Set CICE cppdefs
"""

import os, sys, re

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *

#from CIME.utils import run_cmd_no_fail, expect
#from CIME.utils import run_cmd
from CIME.case import Case
from CIME.buildnml import parse_input
import glob, shutil
logger = logging.getLogger(__name__)

###############################################################################
def buildcpp(case):
###############################################################################

# tcraig, should move the decomposition stuff from buildcpp to buildnml
#  the only thing needed here is the actual cpp stuff -Dncdf -DRASM -DCESMCOUPLED
#    # determine cice_config_opts
    cice_config_opts = case.get_value('CICE_CONFIG_OPTS')

#    # set ice grid settings
#    nx = case.get_value("ICE_NX")
#    ny = case.get_value("ICE_NY")

    ice_grid = case.get_value('ICE_GRID')
    if ice_grid == 'ar9v2':
        hgrid = 'ar9v1'
    elif ice_grid == 'ar9v4':
        hgrid = 'ar9v3'
    else:
        hgrid = ice_grid

#    # determine decomposition xml variables if CICE_AUTO_DECOMP is true
#    # - invoke generate_cice_decomp.pl and update env_build.xml settings to
#    # reflect changes in the configuration this will trigger
#    cice_auto_decomp = case.get_value("CICE_AUTO_DECOMP")
#
#    pts_mode = case.get_value("PTS_MODE")
#    # set cice mode and cice_config_opts
    cice_mode = case.get_value("CICE_MODE")
    print "DEBUG: cice_mode = ",cice_mode

    # set number of ice categories
    # NOTE that ICE_NCAT is used by both cice and pop - but is set by cice
    # and as a result it is assumed that the cice buildcpp is called
    # BEFORE the pop buildcpp. This order is set by the xml variable
    # COMP_CLASSES in the driver config_component.xml file
    if cice_mode == 'prescribed':
        ncat = 1
    else:
        ncat = 5
    print "DEBUG: ncat = ",ncat
    ncat = set_nondefault_cpp(cice_config_opts, "ncat", ncat)
    print "DEBUG: called set_nondefault_cpp"
    case.set_value("ICE_NCAT",ncat)
    print "DEBUG: called case.set_value"
    logger.debug("cice: number of ice categories (ncat) is %s" %ncat)

    comp_atm = case.get_value("COMP_ATM")
    comp_ocn = case.get_value("COMP_OCN")
    cice_cppdefs = " -Dncdf"

    if (comp_atm == 'fv3gfs' and comp_ocn == "mom"):
        cice_cppdefs = cice_cppdefs + " -DNEMS_COUPLED"

    # trigger RASM options with ar9v grid, otherwise set CESM options
    if "ar9v" in hgrid:
        cice_cppdefs = cice_cppdefs + " -DRASM_MODS"

    # update the xml variable CICE_CPPDEFS with the above definition
    case.set_value("CICE_CPPDEFS", cice_cppdefs)

    return cice_cppdefs

###############################################################################
def set_nondefault_cpp(cice_config_opts, string, value):

    # overwrite value if need be
    if string in cice_config_opts:
        match = re.search(r"\s*-%s\s*(\d+)\s*"%string, cice_config_opts)
        if match is not None:
            value = match.group(1)
    return value

###############################################################################
def _main_func():

    caseroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        cice_cppdefs = buildcpp(case)
    logger.info("CICE_CPPDEFS: %s" %cice_cppdefs)

if __name__ == "__main__":
    _main_func()
